{"version":3,"sources":["theory.ts","components/Stave.tsx","actions.ts","types.ts","components/Fretboard.tsx","components/NewNoteButton.tsx","components/UserScore.tsx","components/ResetButton.tsx","components/AccidentalCheckbox.tsx","serviceWorker.ts","reducers.ts","index.tsx","App.tsx"],"names":["parseNote","note","res","exec","whiteKey","accidental","octave","Error","randomElement","items","Math","floor","random","length","midiNum","notename","parseInt","defaultNoteOpts","useSharps","useFlats","useDoubleSharps","useDoubleFlats","octaves","whiteKeys","lowestNote","highestNote","randomNote","userOpts","opts","accidentals","push","lowestMidi","highestMidi","generateNote","midi","transposeNote","halfSteps","chromaticSharps","chromaticFlats","pitch","indexSharps","indexOf","indexFlats","arr","offset","toString","standardTuning","fretboardNotes","tuning","startFret","fretCount","notes","string","fret","abs","isEnharmonic","firstMidi","every","isCorrectGuess","noteToGuess","clickedFret","coord","find","findNoteAt","drawNote","vexObjs","vexNotename","match","idx","index","slice","vexFormat","staveNote","Vex","StaveNote","keys","duration","theory","addAccidental","Accidental","setExtraLeftPx","stave","getWidth","Formatter","FormatAndDraw","context","Stave","props","staveElem","React","useRef","useSelector","state","useEffect","objs","elem","width","height","firstChild","removeChild","empty","renderer","Renderer","resize","getContext","addClef","setContext","makeVexObjs","current","draw","className","id","ref","ActionType","Status","newNoteToGuess","type","NEW_NOTE_TO_GUESS","payload","Fretboard","fretboardElem","dispatch","useDispatch","status","correctGuess","CORRECT","isPlaying","PLAYING","dots","color","correctCoord","fretboardNote","findFret","FretboardDiagram","drawDotOnHover","onClick","FRETBOARD_CLICK","fretboardClick","NewNoteButton","noteOpts","UserScore","guesses","correctGuesses","filter","guess","isCorrect","incorrectGuesses","ResetButton","RESET","SharpCheckbox","htmlFor","name","checked","onChange","TOGGLE_SHARPS","FlatCheckbox","TOGGLE_FLATS","DoubleSharpCheckbox","TOGGLE_DOUBLE_SHARPS","DoubleFlatCheckbox","TOGGLE_DOUBLE_FLATS","Boolean","window","location","hostname","makeInitialState","handleNewNoteToGuess","action","handleFretboardClick","INCORRECT","concat","updateNoteOpts","sharpOpts","flatOpts","doubleSharpOpts","doubleFlatOpts","store","createStore","subscribe","console","log","getState","ReactDOM","render","handleKeyPress","event","key","addEventListener","removeEventListener","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a55e40a.chunk.js","sourcesContent":["import { NoteOpts, FretboardNote, FretboardCoord } from './types';\n\nexport function parseNote(note: string) {\n  const noteRegex = /([a-zA-Z])(#{1,2}||b{1,2})\\/?(\\d)/g;\n  const res = noteRegex.exec(note);\n\n  if (res != null) {\n    const [, whiteKey, accidental, octave] = res;\n    return { whiteKey, accidental, octave };\n  } else {\n    throw new Error(`${note} could not be parsed.`);\n  }\n}\n\nfunction randomElement<T>(items: Array<T>) {\n  return items[Math.floor(Math.random() * items.length)];\n}\n\nexport function midiNum(notename: string) {\n  const whiteKeyOffsets = {\n    'C': 0,\n    'D': 2,\n    'E': 4,\n    'F': 5,\n    'G': 7,\n    'A': 9,\n    'B': 11\n  };\n\n  const accidentalOffsets = {\n    'bb': -2,\n    'b': -1,\n    '': 0,\n    '#': 1,\n    '##': 2\n  };\n\n  const { whiteKey, accidental, octave } = parseNote(notename);\n\n  return whiteKeyOffsets[whiteKey] + accidentalOffsets[accidental] + (12 * (parseInt(octave) + 1));\n}\n\nexport const defaultNoteOpts: NoteOpts = {\n  useSharps: true,\n  useFlats: true,\n  useDoubleSharps: false,\n  useDoubleFlats: false,\n  octaves: [3, 4, 5],\n  whiteKeys: ['C', 'D', 'E', 'F', 'G', 'A', 'B'],\n  lowestNote: 'E3',\n  highestNote: 'G#5'\n}\n\nexport function randomNote(userOpts: NoteOpts = {}): string {\n  const opts = { ...defaultNoteOpts, ...userOpts };\n\n  const whiteKeys = ['A', 'B', 'C', 'D', 'E', 'F', 'G'];\n  const octaves = [3, 4, 5, 6];\n  const accidentals = ['', '', '', ''];\n\n  if (opts.useSharps) {\n    accidentals.push('#');\n    accidentals.push('#');\n  }\n\n  if (opts.useFlats) {\n    accidentals.push('b');\n    accidentals.push('b');\n  }\n\n  if (opts.useDoubleSharps) {\n    accidentals.push('##');\n  }\n\n  if (opts.useDoubleFlats) {\n    accidentals.push('bb');\n  }\n\n  const lowestMidi = midiNum(opts.lowestNote);\n  const highestMidi = midiNum(opts.highestNote);\n\n  function generateNote() {\n    const whiteKey = randomElement(whiteKeys);\n    const accidental = randomElement(accidentals);\n    const octave = randomElement(octaves);\n\n    return whiteKey + accidental + octave;\n  }\n\n  let note = generateNote();\n  let midi = midiNum(note);\n\n  while (midi < lowestMidi || midi > highestMidi) {\n    note = generateNote();\n    midi = midiNum(note);\n  }\n\n  return note;\n}\n\nexport function transposeNote(notename: string, halfSteps: number) {\n  const chromaticSharps = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  const chromaticFlats = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n\n  const { whiteKey, accidental, octave } = parseNote(notename);\n  const pitch = whiteKey + accidental;\n  const indexSharps = chromaticSharps.indexOf(pitch);\n  const indexFlats = chromaticFlats.indexOf(pitch);\n\n  const [arr, idx] = indexSharps === -1 ? [chromaticFlats, indexFlats] : [chromaticSharps, indexSharps];\n\n  const offset = idx + halfSteps;\n  const transposedPitch = arr[((offset % 12) + 12) % 12];\n  const transposedOctave = parseInt(octave) + Math.floor(offset / 12);\n\n  return transposedPitch + transposedOctave.toString();\n}\n\nconst standardTuning = ['E3', 'A3', 'D4', 'G4', 'B4', 'E5'];\n\nexport function fretboardNotes(tuning = standardTuning, startFret = 0, fretCount = 4): FretboardNote[] {\n  const notes: { string: number, fret: number, note: string }[] = [];\n\n  for (let string = 0; string < tuning.length; string++) {\n    for (let fret = startFret; fret <= fretCount; fret++) {\n      notes.push({\n        string: Math.abs(string - tuning.length),\n        fret: fret,\n        note: transposeNote(tuning[string], fret)\n      });\n    }\n  }\n\n  return notes;\n}\n\nexport function findNoteAt(coord: FretboardCoord, notes = fretboardNotes()) {\n  return notes.find(note => {\n    return note.string === coord.string && note.fret === coord.fret;\n  }).note;\n}\n\nexport function isEnharmonic(...notes: string[]): boolean {\n  const firstMidi = notes[0] ? midiNum(notes[0]) : null;\n\n  return notes.every(note => {\n    return firstMidi === midiNum(note);\n  });\n}\n\nexport function isCorrectGuess(noteToGuess: string, clickedFret: FretboardCoord | null) {\n  if (clickedFret == null) { return false };\n\n  const guessedNote = findNoteAt(clickedFret);\n\n  return isEnharmonic(noteToGuess, guessedNote);\n}\n\nexport function findFret(note: string, notes = fretboardNotes()): FretboardCoord {\n  return notes.find(fretboardNote => {\n    return isEnharmonic(note, fretboardNote.note)\n  });\n}","import React from 'react';\nimport * as Vex from 'vexflow';\nimport * as theory from '../theory';\nimport { useSelector } from 'react-redux';\nimport { AppState } from '../types';\n\ntype VexObjs = {\n  renderer: Vex.Flow.Renderer,\n  context: Vex.IRenderContext,\n  stave: Vex.Flow.Stave,\n}\n\nfunction vexFormat(notename: string) {\n  const match = /\\d$/.exec(notename);\n  if (match != null) {\n    const idx = match.index;\n    return notename.slice(0, idx) + '/' + notename.slice(idx);\n  } else {\n    throw new Error(`${notename} does not contain an octave number.`);\n  }\n}\n\nfunction empty(elem: Element) {\n  while (elem.firstChild) {\n    elem.removeChild(elem.firstChild);\n  }\n}\n\nfunction makeVexObjs(elem: HTMLElement, width: number, height: number): VexObjs {\n  empty(elem);\n\n  const renderer = new Vex.Flow.Renderer(elem, 3);\n  renderer.resize(width, height);\n\n  const context = renderer.getContext();\n\n  const stave = new Vex.Flow.Stave(0, 0, width-1);\n  stave.addClef('treble');\n  stave.setContext(context);\n\n  return { renderer, context, stave };\n}\n\nfunction drawNote(vexObjs: VexObjs, notename: string) {\n  const vexNotename = vexFormat(notename);\n\n  const staveNote = new Vex.Flow.StaveNote({\n    keys: [vexNotename],\n    duration: 'w'\n  });\n\n  const accidental = theory.parseNote(notename).accidental;\n  if (accidental !== '') {\n    staveNote.addAccidental(0, new Vex.Flow.Accidental(accidental));\n    staveNote.setExtraLeftPx(vexObjs.stave.getWidth() / 3.8);\n  } else {\n    staveNote.setExtraLeftPx(vexObjs.stave.getWidth() / 3.25);\n  }\n\n  Vex.Flow.Formatter.FormatAndDraw(vexObjs.context, vexObjs.stave, [staveNote]);\n}\n\nexport function Stave(props: any) {\n  const [width, height] = [200, 130];\n  const staveElem = React.useRef(null);\n  const note = useSelector((state: AppState) => state.noteToGuess);\n\n  React.useEffect(() => {\n    const objs = makeVexObjs(staveElem.current, width, height);\n    objs.stave.draw();\n\n    if (note != null) {\n      drawNote(objs, note);\n    }\n  });\n\n  return (\n    <div className=\"Stave\">\n      <div id=\"stave-ref\" ref={staveElem} />\n    </div>\n  )\n}","import { randomNote } from './theory';\nimport { FretboardCoord, NoteOpts } from './types';\n\nexport enum ActionType {\n  FRETBOARD_CLICK = 'FRETBOARD_CLICK',\n\n  NEW_NOTE_TO_GUESS = 'NEW_NOTE_TO_GUESS',\n  RESET = 'RESET',\n\n  TOGGLE_SHARPS = 'TOGGLE_SHARPS',\n  TOGGLE_FLATS = 'TOGGLE_FLATS',\n  TOGGLE_DOUBLE_SHARPS = 'TOGGLE_DOUBLE_SHARPS',\n  TOGGLE_DOUBLE_FLATS = 'TOGGLE_DOUBLE_FLATS'\n}\n\nexport interface NewNoteToGuessAction {\n  type: ActionType.NEW_NOTE_TO_GUESS,\n  payload: string\n}\n\nexport interface FretboardClickAction {\n  type: ActionType.FRETBOARD_CLICK,\n  payload: FretboardCoord\n}\n\nexport interface ResetAction {\n  type: ActionType.RESET\n}\n\nexport interface ToggleSharpsAction {\n  type: ActionType.TOGGLE_SHARPS\n}\n\nexport interface ToggleFlatsAction {\n  type: ActionType.TOGGLE_FLATS\n}\n\nexport interface ToggleDoubleSharpsAction {\n  type: ActionType.TOGGLE_DOUBLE_SHARPS\n}\n\nexport interface ToggleDoubleFlatsAction {\n  type: ActionType.TOGGLE_DOUBLE_FLATS\n}\n\nexport function newNoteToGuess(opts: NoteOpts): NewNoteToGuessAction {\n  const note = randomNote(opts);\n\n  return {\n    type: ActionType.NEW_NOTE_TO_GUESS,\n    payload: note\n  }\n}\n\nexport function fretboardClick(coord: FretboardCoord): FretboardClickAction {\n  return {\n    type: ActionType.FRETBOARD_CLICK,\n    payload: coord\n  }\n}\n\nexport function reset(): ResetAction {\n  return {\n    type: ActionType.RESET\n  }\n}\n\nexport function toggleSharps(): ToggleSharpsAction {\n  return {\n    type: ActionType.TOGGLE_SHARPS\n  }\n}\n\nexport function toggleFlats(): ToggleFlatsAction {\n  return {\n    type: ActionType.TOGGLE_FLATS\n  }\n}\n\nexport function toggleDoubleSharps(): ToggleDoubleSharpsAction {\n  return {\n    type: ActionType.TOGGLE_DOUBLE_SHARPS\n  }\n}\n\nexport function toggleDoubleFlats(): ToggleDoubleFlatsAction {\n  return {\n    type: ActionType.TOGGLE_DOUBLE_FLATS\n  }\n}\n\nexport type Action = NewNoteToGuessAction\n  | FretboardClickAction | ResetAction\n  | ToggleSharpsAction | ToggleFlatsAction\n  | ToggleDoubleSharpsAction | ToggleDoubleFlatsAction;","export interface FretboardCoord {\n  string: number,\n  fret: number\n}\n\nexport interface FretboardDot extends FretboardCoord {\n  color: string\n}\n\nexport interface FretboardNote extends FretboardCoord {\n  note: string\n}\n\nexport enum Status {\n  PLAYING = 'PLAYING',\n  CORRECT = 'CORRECT',\n  INCORRECT = 'INCORRECT'\n}\n\nexport interface Guess {\n  clickedFret: FretboardCoord,\n  noteToGuess: string,\n  isCorrect: boolean\n}\n\nexport interface NoteOpts {\n  useSharps?: boolean,\n  useFlats?: boolean,\n  useDoubleSharps?: boolean,\n  useDoubleFlats?: boolean,\n  octaves?: number[],\n  whiteKeys?: string[],\n  lowestNote?: string,\n  highestNote?: string\n}\n\nexport interface AppState {\n  noteToGuess: string,\n  clickedFret?: FretboardCoord,\n  status: Status,\n  guesses: Guess[],\n  noteOpts: NoteOpts\n}","import * as React from 'react';\nimport { FretboardDiagram } from 'fretboard-diagram';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fretboardClick } from '../actions';\nimport { AppState, Status, FretboardCoord } from '../types';\nimport { findFret } from '../theory';\n\nconst correctColor = 'lime';\nconst incorrectColor = 'deeppink';\n\nexport function Fretboard(props: any) {\n  const fretboardElem = React.useRef(null);\n  const dispatch = useDispatch();\n  const noteToGuess = useSelector((state: AppState) => state.noteToGuess);\n  const clickedFret = useSelector((state: AppState) => state.clickedFret);\n  const status = useSelector((state: AppState) => state.status);\n\n  React.useEffect(() => {\n    const correctGuess = status === Status.CORRECT;\n    const isPlaying = status === Status.PLAYING;\n    const dots = [];\n\n    if (clickedFret != null) {\n      const color = correctGuess ? correctColor : incorrectColor;\n      dots.push({ ...clickedFret, color });\n\n      if (!correctGuess) {\n        const correctCoord = findFret(noteToGuess);\n        dots.push({ ...correctCoord, color: correctColor });\n      }\n    }\n\n    new FretboardDiagram({\n      id: \"fretboard-ref\",\n      dots,\n      drawDotOnHover: isPlaying,\n      onClick: (coord: FretboardCoord) => {\n        if (isPlaying) {\n          dispatch(fretboardClick(coord))\n        }\n      }\n    });\n  });\n\n  return (\n    <div className=\"Fretboard\">\n      <div id=\"fretboard-ref\" ref={fretboardElem} />\n    </div>\n  );\n}","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { newNoteToGuess } from '../actions';\nimport { AppState } from '../types';\n\nexport const NewNoteButton = props => {\n  const dispatch = useDispatch();\n  const noteOpts = useSelector((state: AppState) => state.noteOpts);\n\n  return (\n    <button className=\"NewNoteButton\"\n      onClick={() => dispatch(newNoteToGuess(noteOpts))}\n    >\n      New Note\n    </button>\n  );\n}","import * as React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AppState, Guess } from '../types';\n\nexport function UserScore() {\n  const guesses = useSelector((state: AppState) => state.guesses);\n\n  const correctGuesses = guesses.filter((guess: Guess) => {\n    return guess.isCorrect;\n  }).length;\n\n  const incorrectGuesses = guesses.filter((guess: Guess) => {\n    return !guess.isCorrect;\n  }).length;\n\n  return (\n    <div className=\"UserScore\">\n      <p>Correct: {correctGuesses}</p>\n      <p>Incorrect: {incorrectGuesses}</p>\n    </div>\n  );\n}","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { reset } from '../actions';\n\nexport function ResetButton() {\n  const dispatch = useDispatch();\n\n  return (\n    <button className=\"ResetButton\"\n      onClick={() => dispatch(reset())}\n    >\n      Restart\n    </button>\n  );\n}","import * as React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppState } from '../types';\nimport { toggleSharps, toggleFlats, toggleDoubleSharps, toggleDoubleFlats } from '../actions';\n\nexport function SharpCheckbox() {\n  const dispatch = useDispatch();\n  const useSharps = useSelector((state: AppState) => state.noteOpts.useSharps);\n\n  return (\n    <div className=\"SharpCheckbox\">\n      <label htmlFor=\"useSharps\">Sharps</label>\n      <input type=\"checkbox\"\n        name=\"useSharps\"\n        checked={useSharps}\n        onChange={() => dispatch(toggleSharps())}\n      />\n    </div>\n  );\n}\n\nexport function FlatCheckbox() {\n  const dispatch = useDispatch();\n  const useFlats = useSelector((state: AppState) => state.noteOpts.useFlats);\n\n  return (\n    <div className=\"FlatCheckbox\">\n      <label htmlFor=\"useFlats\">Flats</label>\n      <input type=\"checkbox\"\n        name=\"useFlats\"\n        checked={useFlats}\n        onChange={() => dispatch(toggleFlats())}\n      />\n    </div>\n  );\n}\n\nexport function DoubleSharpCheckbox() {\n  const dispatch = useDispatch();\n  const useFlats = useSelector((state: AppState) => state.noteOpts.useDoubleSharps);\n\n  return (\n    <div className=\"DoubleSharpCheckbox\">\n      <label htmlFor=\"useDoubleSharps\">Double sharps</label>\n      <input type=\"checkbox\"\n        name=\"useDoubleSharps\"\n        checked={useFlats}\n        onChange={() => dispatch(toggleDoubleSharps())}\n      />\n    </div>\n  );\n}\n\nexport function DoubleFlatCheckbox() {\n  const dispatch = useDispatch();\n  const useDoubleFlats = useSelector((state: AppState) => state.noteOpts.useDoubleFlats);\n\n  return (\n    <div className=\"DoubleFlatCheckbox\">\n      <label htmlFor=\"useDoubleFlats\">Double flats</label>\n      <input type=\"checkbox\"\n        name=\"useDoubleFlats\"\n        checked={useDoubleFlats}\n        onChange={() => dispatch(toggleDoubleFlats())}\n      />\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Action, FretboardClickAction, NewNoteToGuessAction, ActionType } from './actions';\nimport { AppState, Status } from './types';\nimport { randomNote, isCorrectGuess, defaultNoteOpts } from './theory';\n\nfunction makeInitialState(): AppState {\n  const note = randomNote(defaultNoteOpts);\n\n  return {\n    noteToGuess: note,\n    clickedFret: null,\n    status: Status.PLAYING,\n    guesses: [],\n    noteOpts: defaultNoteOpts\n  }\n}\n\nfunction handleNewNoteToGuess(state: AppState, action: NewNoteToGuessAction): AppState {\n  return {\n    ...state,\n    noteToGuess: action.payload,\n    clickedFret: null,\n    status: Status.PLAYING\n  }\n}\n\nfunction handleFretboardClick(state: AppState, action: FretboardClickAction): AppState {\n  const isCorrect = isCorrectGuess(state.noteToGuess, action.payload);\n  const status = isCorrect ? Status.CORRECT : Status.INCORRECT;\n\n  const guesses = state.guesses.concat([{\n    noteToGuess: state.noteToGuess,\n    clickedFret: action.payload,\n    isCorrect\n  }]);\n\n  return {\n    ...state,\n    clickedFret: action.payload,\n    status,\n    guesses\n  }\n}\n\nfunction updateNoteOpts(state: AppState, action: Action): AppState {\n  switch (action.type) {\n    case ActionType.TOGGLE_SHARPS:\n      const sharpOpts = { ...state.noteOpts, useSharps: !state.noteOpts.useSharps };\n      return { ...state, noteOpts: sharpOpts };\n\n    case ActionType.TOGGLE_FLATS:\n      const flatOpts = { ...state.noteOpts, useFlats: !state.noteOpts.useFlats };\n      return { ...state, noteOpts: flatOpts };\n\n    case ActionType.TOGGLE_DOUBLE_SHARPS:\n      const doubleSharpOpts = { ...state.noteOpts, useDoubleSharps: !state.noteOpts.useDoubleSharps };\n      return { ...state, noteOpts: doubleSharpOpts };\n\n    case ActionType.TOGGLE_DOUBLE_FLATS:\n      const doubleFlatOpts = { ...state.noteOpts, useDoubleFlats: !state.noteOpts.useDoubleFlats };\n      return { ...state, noteOpts: doubleFlatOpts };\n  }\n}\n\nexport function rootReducer(state = makeInitialState(), action: Action): AppState {\n  switch (action.type) {\n    case ActionType.NEW_NOTE_TO_GUESS:\n      return handleNewNoteToGuess(state, action);\n\n    case ActionType.FRETBOARD_CLICK:\n      return handleFretboardClick(state, action);\n\n    case ActionType.RESET:\n      return makeInitialState();\n\n    case ActionType.TOGGLE_SHARPS:\n    case ActionType.TOGGLE_FLATS:\n    case ActionType.TOGGLE_DOUBLE_SHARPS:\n    case ActionType.TOGGLE_DOUBLE_FLATS:\n      return updateNoteOpts(state, action);\n\n    default:\n      return state\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { rootReducer } from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer);\nstore.subscribe(() => console.log(store.getState()));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect } from 'react';\nimport './App.css';\nimport { Stave } from './components/Stave';\nimport { Fretboard } from './components/Fretboard';\nimport { NewNoteButton } from './components/NewNoteButton';\nimport { UserScore } from './components/UserScore';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppState, Status } from './types';\nimport { newNoteToGuess } from './actions';\nimport { ResetButton } from './components/ResetButton';\nimport { SharpCheckbox, FlatCheckbox, DoubleSharpCheckbox, DoubleFlatCheckbox } from './components/AccidentalCheckbox';\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const status = useSelector((state: AppState) => state.status);\n  const noteOpts = useSelector((state: AppState) => state.noteOpts);\n\n  function handleKeyPress(event: KeyboardEvent) {\n    if (status === Status.PLAYING) { return; };\n\n    switch (event.key) {\n      case 'Enter':\n        dispatch(newNoteToGuess(noteOpts));\n      case ' ':\n        dispatch(newNoteToGuess(noteOpts));\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('keypress', handleKeyPress);\n\n    return () => {\n      window.removeEventListener('keypress', handleKeyPress);\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <UserScore />\n      <Stave />\n      <Fretboard />\n      <NewNoteButton />\n      <ResetButton />\n      <SharpCheckbox />\n      <FlatCheckbox />\n      <DoubleSharpCheckbox />\n      <DoubleFlatCheckbox />\n    </div>\n  )\n}"],"sourceRoot":""}